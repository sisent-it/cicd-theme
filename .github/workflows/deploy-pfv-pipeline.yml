name: Theme deploy pfv CICD

on:
  workflow_call:
    inputs:
      REACT_APP_API_AUTH_URL_PFV:
        description: "URL de l'API Auth PFV"
        required: true
        type: string
      REACT_APP_API_AUTH_URL_PRD:
        description: "URL de l'API Auth PRD"
        required: true
        type: string
      REACT_APP_API_COMPONENT_URL_PFV:
        description: "URL de l'API Component PFV"
        required: true
        type: string
      REACT_APP_API_COMPONENT_URL_PRD:
        description: "URL de l'API Component PRD"
        required: true
        type: string
      REACT_APP_URL:
        description: "URL de l'application"
        required: true
        type: string
      REACT_APP_THEME:
        description: "Thème de l'application"
        required: true
        type: string
      REACT_APP_ENV:
        description: "Environnement de l'application"
        required: true
        type: string
      REACT_APP_FRONT_AUTHENTIFICATION_PFV:
        description: "URL de l'authentification front PFV"
        required: true
        type: string
      REACT_APP_FRONT_AUTHENTIFICATION_PRD:
        description: "URL de l'authentification front PRD"
        required: true
        type: string
    secrets:
      TOKEN_GITHUB:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      KUBECONFIG_PRD:
        required: true
      KUBECONFIG_PFV:
        required: true
      GCP_SA_KEY_PRD:
        required: true
      GCP_SA_KEY_PFV:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    # Récupérer le dépôt du projet
    - name: Checkout repository
      uses: actions/checkout@v3

    # Configurer l'agent SSH pour utiliser la clé privée
    - name: Setup SSH agent
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      # Cette étape configure un agent SSH et ajoute la clé privée pour les connexions SSH.

    # Désactiver la vérification stricte des clés hôtes pour SSH
    - name: Disable host key checking
      run: |
        echo "StrictHostKeyChecking no" >> ~/.ssh/config
      # Cela désactive la vérification stricte des clés hôtes pour éviter des erreurs lors de la connexion SSH.

    # Configurer git pour utiliser SSH pour GitHub
    - name: Configure git to use SSH for GitHub packages
      run: |
        git config --global url."git@github.com:".insteadOf "https://github.com/"
      # Cette étape force git à utiliser SSH pour tous les dépôts GitHub.

    # Installation des dépendances avec npm
    - name: Install dependencies
      run: npm install
      # Installation des dépendances du projet avec npm.

    # Lancer le processus de build
    - name: Run build
      run: npm run build
      # Construction du projet front-end.

    # Construction de l'image Docker pour l'application
    - name: Build Docker image
      run: |
        docker build -t my-app:latest .
      env:
        DOCKER_BUILDKIT: 1  # Utilise BuildKit pour des builds plus rapides et plus efficaces.
      # Cette étape crée une image Docker de l'application.

  # Job de déploiement pour l'environnement PFV
  deploy_pfv:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:

    # Récupérer le dépôt du projet avec SSH
    - name: Checkout repository using SSH
      uses: actions/checkout@v3
      # Cette étape clone le dépôt via SSH.

    # Créer le fichier .env avec les variables nécessaires pour l'environnement PFV
    - name: Create .env file
      run: |
        echo "REACT_APP_API_AUTH_URL=${{ inputs.REACT_APP_API_AUTH_URL_PFV }}" >> .env
        echo "REACT_APP_API_COMPONENT_URL=${{ inputs.REACT_APP_API_COMPONENT_URL_PFV }}" >> .env
        echo "REACT_APP_URL=${{ inputs.REACT_APP_URL }}" >> .env
        echo "REACT_APP_THEME=${{ inputs.REACT_APP_THEME }}" >> .env
        echo "REACT_APP_ENV=pfv" >> .env
        echo "REACT_APP_FRONT_AUTHENTIFICATION=${{ inputs.REACT_APP_FRONT_AUTHENTIFICATION_PFV }}" >> .env
      # Cette étape génère un fichier .env avec les variables nécessaires pour l'environnement PFV.

    # Connexion au registre des conteneurs GitHub
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.TOKEN_GITHUB }}
      # Connexion au registre GitHub pour le push des images Docker.

    # Construction et push de l'image Docker vers GitHub Container Registry
    - name: Build and push Docker image
      run: |
        docker buildx create --use
        docker buildx build --platform linux/amd64,linux/arm64 -t ghcr.io/${{ github.repository }}:latest --push .
      # Construction et push de l'image Docker multi-plateforme vers le registre GitHub.

    # Récupérer le dépôt Helm Chart via SSH
    - name: Checkout Helm Chart Repository using SSH
      uses: actions/checkout@v3
      with:
        ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
        repository: sisent-it/helm-theme
        path: helm-chart
        ref: main
      # Cette étape clone le dépôt Helm Chart en utilisant SSH.

    # Installer Helm
    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
      # Télécharge et installe l'outil Helm pour gérer les releases Kubernetes.

    # Installer jq
    - name: Install jq
      run: sudo apt-get install -y jq
      # Installe l'outil jq pour manipuler des fichiers JSON.

    # Installer Google Cloud CLI
    - name: Install google-cloud-cli (includes gsutil)
      run: |
        sudo apt-get update && sudo apt-get install -y google-cloud-cli
      # Installe Google Cloud CLI pour interagir avec Google Cloud Storage et Kubernetes.

    # Configuration des identifiants Google Cloud pour le projet PFV
    - name: Set up Google Cloud credentials (myhappyweb-pfv)
      run: |
        echo '${{ secrets.GCP_SA_KEY_PFV }}' | sed 's/\\n/\\n/g' | jq . > "${HOME}/gcp-key.json"
      # Crée un fichier de clé pour authentifier les services Google Cloud.

    # Authentification manuelle avec gcloud en utilisant la clé du compte de service
    - name: Authenticate with gcloud (myhappyweb-pfv)
      run: |
        gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json"
        gcloud config set project myhappyweb-pfv
      # Authentifie l'accès à Google Cloud en utilisant le fichier de clé de compte de service.

    # Copier les fichiers du bucket source Google Cloud vers un dossier local
    - name: Copy files from myhappyweb-pfv-site bucket to a local folder
      run: |
        mkdir -p ./bucket-content-site-pfv-${{ inputs.REACT_APP_THEME }}
        gsutil -m cp -r gs://myhappyweb-pfv-site/pfv/${{ inputs.REACT_APP_THEME }}/default-${{ inputs.REACT_APP_THEME }}.myhappyweb-pfv.com/* ./bucket-content-site-pfv-${{ inputs.REACT_APP_THEME }}
      # Copie des fichiers du bucket Google Cloud vers un répertoire local.

    # Copier le répertoire local vers le bucket de thème
    - name: Copy files from local folder to bucket theme
      run: |
        mv ./bucket-content-site-pfv-${{ inputs.REACT_APP_THEME }}/pfv-${{ inputs.REACT_APP_THEME }}-default-${{ inputs.REACT_APP_THEME }}.myhappyweb-pfv.com.json  ./bucket-content-site-pfv-${{ inputs.REACT_APP_THEME }}/${{ inputs.REACT_APP_THEME }}-default.json
        gsutil -m cp -r ./bucket-content-site-pfv-${{ inputs.REACT_APP_THEME }}/* gs://myhappyweb-pfv-theme/theme/${{ inputs.REACT_APP_THEME }}
      # Transfère les fichiers modifiés vers le bucket de thème Google Cloud.

    # Configurer le kubeconfig pour Kubernetes
    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_PFV }}" > ~/.kube/config
        chmod 600 ~/.kube/config
      # Configure le fichier kubeconfig pour accéder à Kubernetes et lui applique des permissions restreintes.

    # Mettre à jour le release Helm pour Kubernetes
    - name: Upgrade pfv Helm Release
      run: |
        helm upgrade --install default-${{ inputs.REACT_APP_THEME }}-myhappyweb-pfv-com --namespace site ./helm-chart \
          --values ./helm-chart/values.yaml \
          --set release_name=default-${{ inputs.REACT_APP_THEME }}-myhappyweb-pfv-com \
          --set image.repository=ghcr.io/${{ github.repository }} \
          --set image.tag=latest \
          --recreate-pods
      # Met à jour ou installe un Helm release pour déployer l'application sur Kubernetes avec la nouvelle image Docker.
