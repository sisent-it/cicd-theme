name: Theme deploy prd CICD

on:
  workflow_call:
    inputs:
      REACT_APP_API_AUTH_URL_PFV:
        description: "URL de l'API Auth PFV"
        required: true
        type: string
      REACT_APP_API_AUTH_URL_PRD:
        description: "URL de l'API Auth PRD"
        required: true
        type: string
      REACT_APP_API_COMPONENT_URL_PFV:
        description: "URL de l'API Component PFV"
        required: true
        type: string
      REACT_APP_API_COMPONENT_URL_PRD:
        description: "URL de l'API Component PRD"
        required: true
        type: string
      REACT_APP_URL:
        description: "URL de l'application"
        required: true
        type: string
      REACT_APP_THEME:
        description: "Thème de l'application"
        required: true
        type: string
      REACT_APP_ENV:
        description: "Environnement de l'application"
        required: true
        type: string
      REACT_APP_FRONT_AUTHENTIFICATION_PFV:
        description: "URL de l'authentification front PFV"
        required: true
        type: string
      REACT_APP_FRONT_AUTHENTIFICATION_PRD:
        description: "URL de l'authentification front PRD"
        required: true
        type: string
      TAG_NAME:
        description: "Nom du tag GitHub pour versionner l'image"
        required: true
        type: string
      REACT_APP_API_ANALYTICS_URL_PFV:
        description: "URL de l'authentification front PRD"
        required: true
        type: string
      REACT_APP_API_ANALYTICS_URL_Prd:
        description: "URL de l'authentification front PRD"
        required: true
        type: string
        
    secrets:
      TOKEN_GITHUB:
        required: true
      SSH_PRIVATE_KEY:
        required: true
      KUBECONFIG_PRD:
        required: true
      KUBECONFIG_PFV:
        required: true
      GCP_SA_KEY_PRD:
        required: true
      GCP_SA_KEY_PFV:
        required: true
    
jobs:
  build-deploy:
    runs-on: ubuntu-latest

    steps:
    # Récupérer le dépôt du projet
    - name: Checkout repository
      uses: actions/checkout@v3

    # Configurer l'agent SSH pour utiliser la clé privée
    - name: Setup SSH agent
      uses: webfactory/ssh-agent@v0.5.3
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      # Cette étape configure un agent SSH et ajoute la clé privée pour les connexions SSH.

    # Désactiver la vérification stricte des clés hôtes pour SSH
    - name: Disable host key checking
      run: |
        echo "StrictHostKeyChecking no" >> ~/.ssh/config
      # Cela désactive la vérification stricte des clés hôtes pour éviter des erreurs lors de la connexion SSH.

    # Configurer git pour utiliser SSH pour GitHub packages
    - name: Configure git to use SSH for GitHub packages
      run: |
        git config --global url."git@github.com:".insteadOf "https://github.com/"
      # Cette étape force git à utiliser SSH pour tous les dépôts GitHub.

    # Installation des dépendances avec npm
    - name: Install dependencies
      run: npm install
      # Installation des dépendances du projet avec npm.

    # Lancer le processus de build pour React
    - name: Build React app
      run: npm run build
      # Cette étape construit l'application React pour la production.

    - name: Create .env file
      run: |
        echo "REACT_APP_API_AUTH_URL=${{ inputs.REACT_APP_API_AUTH_URL_PRD }}" >> .env
        echo "REACT_APP_API_COMPONENT_URL=${{ inputs.REACT_APP_API_COMPONENT_URL_PRD }}" >> .env
        echo "REACT_APP_URL=${{ inputs.REACT_APP_URL }}" >> .env
        echo "REACT_APP_THEME=${{ inputs.REACT_APP_THEME }}" >> .env
        echo "REACT_APP_ENV=pfv" >> .env
        echo "REACT_APP_FRONT_AUTHENTIFICATION=${{ inputs.REACT_APP_FRONT_AUTHENTIFICATION_PRD }}" >> .env
        echo "REACT_APP_API_ANALYTICS_URL=${{ inputs.REACT_APP_API_ANALYTICS_URL_PRD }}" >> .env

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.TOKEN_GITHUB }}

    # Cette étape construit et pousse l'image Docker vers le registre en utilisant BuildKit et en incluant le fichier `.env`.

    - name: Build and push Docker image with Tag
      run: |
          DOCKER_BUILDKIT=1 docker buildx create --use
          DOCKER_BUILDKIT=1 docker buildx build --platform linux/amd64,linux/arm64 \
          -t ghcr.io/${{ github.repository }}:${{ inputs.TAG_NAME }} \
          --build-arg ENV_FILE=.env \
          --push .
  
    # Récupérer le dépôt Helm Chart via SSH
    - name: Checkout Helm Chart Repository using SSH
      uses: actions/checkout@v3
      with:
        ssh-key: ${{ secrets.SSH_PRIVATE_KEY }}
        repository: sisent-it/helm-theme
        path: helm-chart
        ref: main
      # Cette étape clone le dépôt Helm Chart en utilisant SSH.

    - name: Install Helm
      run: |
        curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

    - name: Install jq
      run: sudo apt-get install -y jq

    - name: Configure kubeconfig
      run: |
        mkdir -p ~/.kube
        echo "${{ secrets.KUBECONFIG_PRD }}" > ~/.kube/config
        chmod 600 ~/.kube/config

    - name: Extract Tag
      run: echo "TAG=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV

    - name: Upgrade prd Helm Release
      run: |
        helm upgrade --install default-${{ inputs.REACT_APP_THEME }}-myhappyweb-com --namespace site ./helm-chart \
          --values ./helm-chart/values.yaml \
          --set release_name=default-${{ inputs.REACT_APP_THEME }}-myhappyweb-com \
          --set image.repository=ghcr.io/${{ github.repository }} \
          --set image.tag=${{ inputs.TAG_NAME }} \
          --recreate-pods

    # Installer google-cloud-cli (qui inclut gsutil)
    - name: Install google-cloud-cli (includes gsutil)
      run: |
        sudo apt-get update && sudo apt-get install -y google-cloud-cli
  
    - name: Set up Google Cloud credentials (myhappyweb-pfv)
      run: |
        echo '${{ secrets.GCP_SA_KEY_PFV }}' | sed 's/\\n/\\n/g' | jq . > "${HOME}/gcp-key.json"
            
      # Authentifier manuellement avec gcloud en utilisant la clé du compte de service
    - name: Authenticate with gcloud (myhappyweb-pfv)
      run: |
        gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json"
        gcloud config set project myhappyweb-pfv
    
    # Copier les fichiers du bucket source (myhappyweb-pfv)
    - name: Copy files from myhappyweb-site bucket to a local folder
      run: |
        mkdir -p ./bucket-content-pfv-${{ inputs.REACT_APP_THEME }}
        gsutil -m cp -r gs://myhappyweb-pfv-theme/theme/${{ inputs.REACT_APP_THEME }}/* ./bucket-content-pfv-${{ inputs.REACT_APP_THEME }}

    - name: Set up Google Cloud credentials (myhappyweb-prd)
      run: |
        echo '${{ secrets.GCP_SA_KEY_PRD }}' | sed 's/\\n/\\n/g' | jq . > "${HOME}/gcp-key.json"
          
    # Authentifier manuellement avec gcloud en utilisant la clé du compte de service
    - name: Authenticate with gcloud (myhappyweb-prd)
      run: |
        gcloud auth activate-service-account --key-file="${HOME}/gcp-key.json"
        gcloud config set project myhappyweb-pfv
    
    # Copier les fichiers du dossier local vers le bucket cible (myhappyweb-prd)
    - name: Copy files to bucket(myhappyweb-prd) dir theme
      run: |
        gsutil -m cp -r ./bucket-content-pfv-${{ inputs.REACT_APP_THEME }}/* gs://myhappyweb-prd-theme/theme/${{ inputs.REACT_APP_THEME }}/

    # Copier les fichiers du dossier le bucket (myhappyweb-prd) dir theme vers site
    - name: Copy files bucket(myhappyweb-prd) dir theme to site
      run: |
        gsutil -m cp -r gs://myhappyweb-prd-theme/theme/${{ inputs.REACT_APP_THEME }}/* gs://myhappyweb-prd-site/prd/${{ inputs.REACT_APP_THEME }}/default-${{ inputs.REACT_APP_THEME }}.myhappyweb.com/
